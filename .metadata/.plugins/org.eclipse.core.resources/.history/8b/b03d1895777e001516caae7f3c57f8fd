/*
 * MultiDimensionalArray.cpp
 *
 *  Created on: 29.10.2015
 *      Author: ugin
 */

#include "ArrayWithState.h"

ArrayWithState::ArrayWithState(string *sequences, int* str_length_array, int n, BlossumMatrix matrix) {
	int size = str_length_array[0];
	this->n = n;
	this->str_length_array = str_length_array;
	this->matrix = matrix;
	this->sequences = sequences
	int i;
	for (i=1; i<n; i++) {
		size *= str_length_array[i]+1;
	}
	array = new int[size];
	cur_pos = 0;
	cur_coords = new int[n];
	for (i=0; i<n; i++) cur_coords[i] = 0;
}

void ArrayWithState::inc() {
	int i;
	cur_pos++;
	cur_coords[0]++;
	for (i=0; i<n; i++) {
		if (cur_coords[i]==str_length_array[i]) {
			cur_coords[i] = 0;
			if (i+1<n) cur_coords[i+1]++;
		} else {
			break;
		}
	}
}

int ArrayWithState::getMaxValue() {
	int i;
	int k = pow(2,n)-1;
	//массив, поразрядно представляющий двоичное число
	int shifts[n];
	for (i=0; i<n; i++) shifts[i] = 0;
	for (i=0; i<k; specInc(&i,shifts)) {

	}
	return 0;
}

void ArrayWithState::specInc(int *index, int shifths[]) {
	(*index)++;
	for (i=0; i<n; i++) {
		if (shifts[i]==1) {
			shifts[i] = 0;
			if (i+1<n) shifts[i]++;
		} else {
			break;
		}
	}
}

int ArrayWithState::getScore(int prec, int cur, int shift[]) {
	int i=0;
	int score = array[prec];
	char cur;
	char next;
	for (i=0; i<n-1; i++) {
		char cur = ( shift[i]==0 ? '-' : sequences[i][cur_coords[i]-1] );
		char next = ( shift[i+1]==0 ? '-' : sequences[i+1][cur_coords[i+1]-1] );
	}
}


ArrayWithState::~ArrayWithState() {
	delete array;
}

int ArrayWithState::getElement(int* indexes) {
	int index = 0;
	for (int i=n-1; i>=0; i--) {
		index += indexes[i]*sliseSize(i);
	}
	return index;
}

void ArrayWithState::setElement(int* indexes, int value) {
	int index = 0;
	for (int i=n-1; i>=0; i--) {
		index += indexes[i]*sliseSize(i);
	}
	array[index] = value;
}

int ArrayWithState::sliseSize(int index) {
	//можно вычеслить один раз а потом использовать
	int size = 1;
	for (int i=1; i<index; i++) {
		size *= str_length_array[i-1];
	}
	return size;
}

int* ArrayWithState::getAllPrecessors() {
	int k = 10;
	int i;
	int *precessors = new int[k];
	for (i=0; i<k; i++) {

	}

}

