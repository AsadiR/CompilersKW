Generator constructor has been started.
The following grammar was received from resources/inputGrammar.txt:
__________________________________
%{ %}
%term <__int__> @NUMBER.
%nonterm <__int__> expr, <__int__> addendum, <__int__> factor.
program = statement @SEMICOLON program | .
statement = @PRINT out outlist.
outlist= @COMMA out outlist  | .
out =  expr %{printf("%d\n", $1);%}.
expr = addendum %{$$=$1;%} { @PLUS addendum %{$$+=$1;%} 
			| @MINUS addendum %{$$-=$1;%} }.
addendum = factor %{$$=$1;%} { @MULTI factor %{$$*=$1;%} 
			| @DIVIDE factor %{$$/=$1;%} }.
factor %{ %} = @LPAREN expr @RPAREN %{$$=$1;%}
 			| @NUMBER %{$$=$1;%}
			| @MINUS @LPAREN expr @RPAREN %{$$=-$1;%}.
%{ %}


__________________________________
Lexical analysis has been started. Following tokens were received:
		SP_SEM_RULE( 1,1 - 1,6 )
		SP_DECL_TERM( 2,1 - 2,6 )
		SP_L_TR_BRACKET( 2,7 - 2,8 )
		SP_TYPE( 2,8 - 2,15 )
		SP_R_TR_BRACKET( 2,15 - 2,16 )
		TERM( 2,17 - 2,24 )
		SP_DOT( 2,24 - 2,25 )
		SP_DECL_NONTERM( 3,1 - 3,9 )
		SP_L_TR_BRACKET( 3,10 - 3,11 )
		SP_TYPE( 3,11 - 3,18 )
		SP_R_TR_BRACKET( 3,18 - 3,19 )
		SP_NON_TERM( 3,20 - 3,24 )
		SP_COMMA( 3,24 - 3,25 )
		SP_L_TR_BRACKET( 3,26 - 3,27 )
		SP_TYPE( 3,27 - 3,34 )
		SP_R_TR_BRACKET( 3,34 - 3,35 )
		SP_NON_TERM( 3,36 - 3,44 )
		SP_COMMA( 3,44 - 3,45 )
		SP_L_TR_BRACKET( 3,46 - 3,47 )
		SP_TYPE( 3,47 - 3,54 )
		SP_R_TR_BRACKET( 3,54 - 3,55 )
		SP_NON_TERM( 3,56 - 3,62 )
		SP_DOT( 3,62 - 3,63 )
		SP_NON_TERM( 4,1 - 4,8 )
		SP_EQUAL( 4,9 - 4,10 )
		SP_NON_TERM( 4,11 - 4,20 )
		TERM( 4,21 - 4,31 )
		SP_NON_TERM( 4,32 - 4,39 )
		SP_DIR_SLASH( 4,40 - 4,41 )
		SP_DOT( 4,42 - 4,43 )
		SP_NON_TERM( 5,1 - 5,10 )
		SP_EQUAL( 5,11 - 5,12 )
		TERM( 5,13 - 5,19 )
		SP_NON_TERM( 5,20 - 5,23 )
		SP_NON_TERM( 5,24 - 5,31 )
		SP_DOT( 5,31 - 5,32 )
		SP_NON_TERM( 6,1 - 6,8 )
		SP_EQUAL( 6,8 - 6,9 )
		TERM( 6,10 - 6,16 )
		SP_NON_TERM( 6,17 - 6,20 )
		SP_NON_TERM( 6,21 - 6,28 )
		SP_DIR_SLASH( 6,30 - 6,31 )
		SP_DOT( 6,32 - 6,33 )
		SP_NON_TERM( 7,1 - 7,4 )
		SP_EQUAL( 7,5 - 7,6 )
		SP_NON_TERM( 7,8 - 7,12 )
		SP_SEM_RULE( 7,13 - 7,36 )
		SP_DOT( 7,36 - 7,37 )
		SP_NON_TERM( 8,1 - 8,5 )
		SP_EQUAL( 8,6 - 8,7 )
		SP_NON_TERM( 8,8 - 8,16 )
		SP_SEM_RULE( 8,17 - 8,27 )
		SP_L_BRACE( 8,28 - 8,29 )
		TERM( 8,30 - 8,35 )
		SP_NON_TERM( 8,36 - 8,44 )
		SP_SEM_RULE( 8,45 - 8,56 )
		SP_DIR_SLASH( 9,4 - 9,5 )
		TERM( 9,6 - 9,12 )
		SP_NON_TERM( 9,13 - 9,21 )
		SP_SEM_RULE( 9,22 - 9,33 )
		SP_R_BRACE( 9,34 - 9,35 )
		SP_DOT( 9,35 - 9,36 )
		SP_NON_TERM( 10,1 - 10,9 )
		SP_EQUAL( 10,10 - 10,11 )
		SP_NON_TERM( 10,12 - 10,18 )
		SP_SEM_RULE( 10,19 - 10,29 )
		SP_L_BRACE( 10,30 - 10,31 )
		TERM( 10,32 - 10,38 )
		SP_NON_TERM( 10,39 - 10,45 )
		SP_SEM_RULE( 10,46 - 10,57 )
		SP_DIR_SLASH( 11,4 - 11,5 )
		TERM( 11,6 - 11,13 )
		SP_NON_TERM( 11,14 - 11,20 )
		SP_SEM_RULE( 11,21 - 11,32 )
		SP_R_BRACE( 11,33 - 11,34 )
		SP_DOT( 11,34 - 11,35 )
		SP_NON_TERM( 12,1 - 12,7 )
		SP_SEM_RULE( 12,8 - 12,13 )
		SP_EQUAL( 12,14 - 12,15 )
		TERM( 12,16 - 12,23 )
		SP_NON_TERM( 12,24 - 12,28 )
		TERM( 12,29 - 12,36 )
		SP_SEM_RULE( 12,37 - 12,47 )
		SP_DIR_SLASH( 13,5 - 13,6 )
		TERM( 13,7 - 13,14 )
		SP_SEM_RULE( 13,15 - 13,25 )
		SP_DIR_SLASH( 14,4 - 14,5 )
		TERM( 14,6 - 14,12 )
		TERM( 14,13 - 14,20 )
		SP_NON_TERM( 14,21 - 14,25 )
		TERM( 14,26 - 14,33 )
		SP_SEM_RULE( 14,34 - 14,45 )
		SP_DOT( 14,45 - 14,46 )
		SP_SEM_RULE( 15,1 - 15,6 )
		<<EOF>>( 15,6 - 17,1 )
Lexical analysis has been finished.
Parsing has been started.
Parsing has been finished. Following parsing tree was received:
grammar
├╴SP_SEM_RULE
├╴init
│ ├╴term_decl
│ │ ├╴SP_DECL_TERM
│ │ ├╴attr
│ │ │ ├╴SP_L_TR_BRACKET
│ │ │ ├╴SP_TYPE
│ │ │ └╴SP_R_TR_BRACKET
│ │ │ 
│ │ ├╴TERM
│ │ └╴SP_DOT
│ │ 
│ └╴nonterm_decl
│   ├╴SP_DECL_NONTERM
│   ├╴attr
│   │ ├╴SP_L_TR_BRACKET
│   │ ├╴SP_TYPE
│   │ └╴SP_R_TR_BRACKET
│   │ 
│   ├╴SP_NON_TERM
│   ├╴SP_COMMA
│   ├╴attr
│   │ ├╴SP_L_TR_BRACKET
│   │ ├╴SP_TYPE
│   │ └╴SP_R_TR_BRACKET
│   │ 
│   ├╴SP_NON_TERM
│   ├╴SP_COMMA
│   ├╴attr
│   │ ├╴SP_L_TR_BRACKET
│   │ ├╴SP_TYPE
│   │ └╴SP_R_TR_BRACKET
│   │ 
│   ├╴SP_NON_TERM
│   └╴SP_DOT
│   
├╴rule
│ ├╴SP_NON_TERM
│ ├╴SP_EQUAL
│ ├╴multi_addendum
│ │ ├╴addendum
│ │ │ ├╴factor
│ │ │ │ └╴ident
│ │ │ │   └╴SP_NON_TERM
│ │ │ │   
│ │ │ ├╴factor
│ │ │ │ └╴ident
│ │ │ │   └╴TERM
│ │ │ │   
│ │ │ └╴factor
│ │ │   └╴ident
│ │ │     └╴SP_NON_TERM
│ │ │     
│ │ ├╴SP_DIR_SLASH
│ │ └╴addendum
│ │   └╴factor
│ │   
│ └╴SP_DOT
│ 
├╴rule
│ ├╴SP_NON_TERM
│ ├╴SP_EQUAL
│ ├╴multi_addendum
│ │ └╴addendum
│ │   ├╴factor
│ │   │ └╴ident
│ │   │   └╴TERM
│ │   │   
│ │   ├╴factor
│ │   │ └╴ident
│ │   │   └╴SP_NON_TERM
│ │   │   
│ │   └╴factor
│ │     └╴ident
│ │       └╴SP_NON_TERM
│ │       
│ └╴SP_DOT
│ 
├╴rule
│ ├╴SP_NON_TERM
│ ├╴SP_EQUAL
│ ├╴multi_addendum
│ │ ├╴addendum
│ │ │ ├╴factor
│ │ │ │ └╴ident
│ │ │ │   └╴TERM
│ │ │ │   
│ │ │ ├╴factor
│ │ │ │ └╴ident
│ │ │ │   └╴SP_NON_TERM
│ │ │ │   
│ │ │ └╴factor
│ │ │   └╴ident
│ │ │     └╴SP_NON_TERM
│ │ │     
│ │ ├╴SP_DIR_SLASH
│ │ └╴addendum
│ │   └╴factor
│ │   
│ └╴SP_DOT
│ 
├╴rule
│ ├╴SP_NON_TERM
│ ├╴SP_EQUAL
│ ├╴multi_addendum
│ │ └╴addendum
│ │   ├╴factor
│ │   │ └╴ident
│ │   │   └╴SP_NON_TERM
│ │   │   
│ │   └╴SP_SEM_RULE
│ │   
│ └╴SP_DOT
│ 
├╴rule
│ ├╴SP_NON_TERM
│ ├╴SP_EQUAL
│ ├╴multi_addendum
│ │ └╴addendum
│ │   ├╴factor
│ │   │ └╴ident
│ │   │   └╴SP_NON_TERM
│ │   │   
│ │   ├╴SP_SEM_RULE
│ │   └╴factor
│ │     ├╴SP_L_BRACE
│ │     ├╴multi_addendum
│ │     │ ├╴addendum
│ │     │ │ ├╴factor
│ │     │ │ │ └╴ident
│ │     │ │ │   └╴TERM
│ │     │ │ │   
│ │     │ │ ├╴factor
│ │     │ │ │ └╴ident
│ │     │ │ │   └╴SP_NON_TERM
│ │     │ │ │   
│ │     │ │ └╴SP_SEM_RULE
│ │     │ │ 
│ │     │ ├╴SP_DIR_SLASH
│ │     │ └╴addendum
│ │     │   ├╴factor
│ │     │   │ └╴ident
│ │     │   │   └╴TERM
│ │     │   │   
│ │     │   ├╴factor
│ │     │   │ └╴ident
│ │     │   │   └╴SP_NON_TERM
│ │     │   │   
│ │     │   └╴SP_SEM_RULE
│ │     │   
│ │     └╴SP_R_BRACE
│ │     
│ └╴SP_DOT
│ 
├╴rule
│ ├╴SP_NON_TERM
│ ├╴SP_EQUAL
│ ├╴multi_addendum
│ │ └╴addendum
│ │   ├╴factor
│ │   │ └╴ident
│ │   │   └╴SP_NON_TERM
│ │   │   
│ │   ├╴SP_SEM_RULE
│ │   └╴factor
│ │     ├╴SP_L_BRACE
│ │     ├╴multi_addendum
│ │     │ ├╴addendum
│ │     │ │ ├╴factor
│ │     │ │ │ └╴ident
│ │     │ │ │   └╴TERM
│ │     │ │ │   
│ │     │ │ ├╴factor
│ │     │ │ │ └╴ident
│ │     │ │ │   └╴SP_NON_TERM
│ │     │ │ │   
│ │     │ │ └╴SP_SEM_RULE
│ │     │ │ 
│ │     │ ├╴SP_DIR_SLASH
│ │     │ └╴addendum
│ │     │   ├╴factor
│ │     │   │ └╴ident
│ │     │   │   └╴TERM
│ │     │   │   
│ │     │   ├╴factor
│ │     │   │ └╴ident
│ │     │   │   └╴SP_NON_TERM
│ │     │   │   
│ │     │   └╴SP_SEM_RULE
│ │     │   
│ │     └╴SP_R_BRACE
│ │     
│ └╴SP_DOT
│ 
├╴rule
│ ├╴SP_NON_TERM
│ ├╴SP_SEM_RULE
│ ├╴SP_EQUAL
│ ├╴multi_addendum
│ │ ├╴addendum
│ │ │ ├╴factor
│ │ │ │ └╴ident
│ │ │ │   └╴TERM
│ │ │ │   
│ │ │ ├╴factor
│ │ │ │ └╴ident
│ │ │ │   └╴SP_NON_TERM
│ │ │ │   
│ │ │ ├╴factor
│ │ │ │ └╴ident
│ │ │ │   └╴TERM
│ │ │ │   
│ │ │ └╴SP_SEM_RULE
│ │ │ 
│ │ ├╴SP_DIR_SLASH
│ │ ├╴addendum
│ │ │ ├╴factor
│ │ │ │ └╴ident
│ │ │ │   └╴TERM
│ │ │ │   
│ │ │ └╴SP_SEM_RULE
│ │ │ 
│ │ ├╴SP_DIR_SLASH
│ │ └╴addendum
│ │   ├╴factor
│ │   │ └╴ident
│ │   │   └╴TERM
│ │   │   
│ │   ├╴factor
│ │   │ └╴ident
│ │   │   └╴TERM
│ │   │   
│ │   ├╴factor
│ │   │ └╴ident
│ │   │   └╴SP_NON_TERM
│ │   │   
│ │   ├╴factor
│ │   │ └╴ident
│ │   │   └╴TERM
│ │   │   
│ │   └╴SP_SEM_RULE
│ │   
│ └╴SP_DOT
│ 
└╴SP_SEM_RULE

Following intermediate representation of input grammar has been received:
__________________________________
%{ %}
%termDecl <__int__>@NUMBER.
%nonTermDecl <__int__>addendum,<__int__>expr,<__int__>factor.
program  = statement  @SEMICOLON  program |  .
statement  = @PRINT  out  outlist .
outlist  = @COMMA  out  outlist |  .
out  = expr %{printf("%d\n", $1);%}.
expr  = addendum %{$$=$1;%} { @PLUS  addendum %{$$+=$1;%}| @MINUS  addendum %{$$-=$1;%}} .
addendum  = factor %{$$=$1;%} { @MULTI  factor %{$$*=$1;%}| @DIVIDE  factor %{$$/=$1;%}} .
factor %{ %} = @LPAREN  expr  @RPAREN %{$$=$1;%}| @NUMBER %{$$=$1;%}| @MINUS  @LPAREN  expr  @RPAREN %{$$=-$1;%}.
%{ %}
__________________________________
